// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ReadItemsApiV1ItemsGetData,
  ReadItemsApiV1ItemsGetResponse,
  CreateItemApiV1ItemsPostData,
  CreateItemApiV1ItemsPostResponse,
  ReadItemApiV1ItemsIdGetData,
  ReadItemApiV1ItemsIdGetResponse,
  UpdateItemApiV1ItemsIdPutData,
  UpdateItemApiV1ItemsIdPutResponse,
  DeleteItemApiV1ItemsIdDeleteData,
  DeleteItemApiV1ItemsIdDeleteResponse,
  LoginAccessTokenApiV1LoginAccessTokenPostData,
  LoginAccessTokenApiV1LoginAccessTokenPostResponse,
  TestTokenApiV1LoginTestTokenPostResponse,
  ReadUsersApiV1UsersGetData,
  ReadUsersApiV1UsersGetResponse,
  CreateUserApiV1UsersPostData,
  CreateUserApiV1UsersPostResponse,
  ReadUserMeApiV1UsersMeGetResponse,
  DeleteUserMeApiV1UsersMeDeleteResponse,
  UpdateUserMeApiV1UsersMePatchData,
  UpdateUserMeApiV1UsersMePatchResponse,
  UpdatePasswordMeApiV1UsersMePasswordPatchData,
  UpdatePasswordMeApiV1UsersMePasswordPatchResponse,
  RegisterUserApiV1UsersSignupPostData,
  RegisterUserApiV1UsersSignupPostResponse,
  ReadUserByIdApiV1UsersUserIdGetData,
  ReadUserByIdApiV1UsersUserIdGetResponse,
  UpdateUserApiV1UsersUserIdPatchData,
  UpdateUserApiV1UsersUserIdPatchResponse,
  DeleteUserApiV1UsersUserIdDeleteData,
  DeleteUserApiV1UsersUserIdDeleteResponse,
  TestEmailApiV1UtilsTestEmailPostData,
  TestEmailApiV1UtilsTestEmailPostResponse,
  HealthCheckApiV1UtilsHealthCheckGetResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItemsApiV1ItemsGet(
    data: ReadItemsApiV1ItemsGetData = {},
  ): CancelablePromise<ReadItemsApiV1ItemsGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItemApiV1ItemsPost(
    data: CreateItemApiV1ItemsPostData,
  ): CancelablePromise<CreateItemApiV1ItemsPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItemApiV1ItemsIdGet(
    data: ReadItemApiV1ItemsIdGetData,
  ): CancelablePromise<ReadItemApiV1ItemsIdGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItemApiV1ItemsIdPut(
    data: UpdateItemApiV1ItemsIdPutData,
  ): CancelablePromise<UpdateItemApiV1ItemsIdPutResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItemApiV1ItemsIdDelete(
    data: DeleteItemApiV1ItemsIdDeleteData,
  ): CancelablePromise<DeleteItemApiV1ItemsIdDeleteResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static accessTokenApiV1LoginAccessTokenPost(
    data: LoginAccessTokenApiV1LoginAccessTokenPostData,
  ): CancelablePromise<LoginAccessTokenApiV1LoginAccessTokenPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testTokenApiV1LoginTestTokenPost(): CancelablePromise<TestTokenApiV1LoginTestTokenPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsersApiV1UsersGet(
    data: ReadUsersApiV1UsersGetData = {},
  ): CancelablePromise<ReadUsersApiV1UsersGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUserApiV1UsersPost(
    data: CreateUserApiV1UsersPostData,
  ): CancelablePromise<CreateUserApiV1UsersPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMeApiV1UsersMeGet(): CancelablePromise<ReadUserMeApiV1UsersMeGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMeApiV1UsersMeDelete(): CancelablePromise<DeleteUserMeApiV1UsersMeDeleteResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMeApiV1UsersMePatch(
    data: UpdateUserMeApiV1UsersMePatchData,
  ): CancelablePromise<UpdateUserMeApiV1UsersMePatchResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMeApiV1UsersMePasswordPatch(
    data: UpdatePasswordMeApiV1UsersMePasswordPatchData,
  ): CancelablePromise<UpdatePasswordMeApiV1UsersMePasswordPatchResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUserApiV1UsersSignupPost(
    data: RegisterUserApiV1UsersSignupPostData,
  ): CancelablePromise<RegisterUserApiV1UsersSignupPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserByIdApiV1UsersUserIdGet(
    data: ReadUserByIdApiV1UsersUserIdGetData,
  ): CancelablePromise<ReadUserByIdApiV1UsersUserIdGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserApiV1UsersUserIdPatch(
    data: UpdateUserApiV1UsersUserIdPatchData,
  ): CancelablePromise<UpdateUserApiV1UsersUserIdPatchResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserApiV1UsersUserIdDelete(
    data: DeleteUserApiV1UsersUserIdDeleteData,
  ): CancelablePromise<DeleteUserApiV1UsersUserIdDeleteResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmailApiV1UtilsTestEmailPost(
    data: TestEmailApiV1UtilsTestEmailPostData,
  ): CancelablePromise<TestEmailApiV1UtilsTestEmailPostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheckApiV1UtilsHealthCheckGet(): CancelablePromise<HealthCheckApiV1UtilsHealthCheckGetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check",
    })
  }
}
